@page "/"
@using BlazorRealworld.Model
@inject ApiClient Api
@inject AppState  AppState

<div class="home-page">
    @if (!AppState.IsSignedIn)
    {
        <div class="banner">
            <div class="container">
                <h1 class="logo-font">conduit</h1>
                <p>A place to share your knowledge.</p>
            </div>
        </div>
    }
    <div class="container page">
        <div class="row">
            <div class="col-md-9">
                <div class="feed-toggle">
                    <ul class="nav nav-pills outline-active">
                        <li class="nav-item">
                            <a href="" class="nav-link @FeedState" @onclick(async () => await YourFeedAsync())>Your Feed</a>
                        </li>
                        <li class="nav-item">
                            <a href="" class="nav-link @GlobalState" @onclick(async () => await GlobalFeedAsync())>Global Feed</a>
                        </li>
                        @if (selectedTab == SelectedTab.Tag)
                        {
                            <li class="nav-item">
                                <a class="nav-link active"><i class="ion-pound"></i> @selectedTag</a>
                            </li>
                        }
                    </ul>
                </div>
                @if (articles == null)
                {
                    <div class="article-preview">
                        Loading articles...
                    </div>
                }
                else if (articles.Count() == 0)
                {
                    <div class="article-preview">
                        No articles here... yet.
                    </div>
                }
                else
                {
                    foreach (var article in articles)
                    {
                        var date = article.createdAt;

                        <div class="article-preview">
                            <div class="article-meta">
                                <a href="profile.html"><img src="@article.author.image" /></a>
                                <div class="info">
                                    <a href="/profile/@article.author.username" class="author">@article.author.username</a>
                                    <span class="date">@String.Format("{0:MMMM} {1}", date, Ordinal(date.Day))</span>
                                </div>
                                <button class="btn btn-outline-primary btn-sm pull-xs-right">
                                    <i class="ion-heart"></i> @article.favoritesCount
                                </button>
                            </div>
                            <a href="/article/@article.slug" class="preview-link">
                                <h1>@article.title</h1>
                                <p>@article.description</p>
                                <span>Read more...</span>
                            </a>
                        </div>
                    }
                }

            </div>
            <div class="col-md-3">
                <div class="sidebar">
                    <p>Popular Tags</p>
                    <div class="tag-list">
                        @if (tags == null)
                        {
                            <text>Loading tags...</text>
                        }
                        else
                        {
                            foreach (var tag in tags)
                            {
                                <a href="" class="tag-pill tag-default" @onclick(async () => await SelectTag(tag))>@tag</a>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    IEnumerable<ArticleModel> articles;
    IEnumerable<string> tags;
    SelectedTab selectedTab;
    string selectedTag;

    string FeedState
    {
        get
        {
            if (!AppState.IsSignedIn) return "disabled";
            if (selectedTab == SelectedTab.Feed) return "active";
            return "";
        }
    }

    string GlobalState => selectedTab == SelectedTab.Global ? "active" : "";

    protected override async Task OnInitAsync()
    {
        await GlobalFeedAsync();
        tags = await Api.GetTagsAsync();
    }

    async Task YourFeedAsync()
    {
        selectedTab = SelectedTab.Feed;
        articles = await Api.GetArticleFeedAsync();
        StateHasChanged();
    }

    async Task GlobalFeedAsync()
    {
        selectedTab = SelectedTab.Global;
        articles = await Api.GetArticlesAsync();
        StateHasChanged();
    }

    async Task SelectTag(string tag)
    {
        selectedTab = SelectedTab.Tag;
        selectedTag = tag;
        articles = await Api.GetArticlesAsync(tag);
        StateHasChanged();
    }

    static string Ordinal(int number)
    {
        var work = number.ToString();
        if ((number % 100) == 11 || (number % 100) == 12 || (number % 100) == 13)
            return work + "th";
        switch (number % 10)
        {
            case 1: work += "st"; break;
            case 2: work += "nd"; break;
            case 3: work += "rd"; break;
            default: work += "th"; break;
        }
        return work;
    }

    enum SelectedTab
    {
        Feed,
        Global,
        Tag
    }
}
