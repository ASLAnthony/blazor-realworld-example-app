@page "/"
@using System.Net.Http.Headers
@inject HttpClient Http
@inject AppState  AppState

<div class="home-page">
    <div class="banner">
        <div class="container">
            <h1 class="logo-font">conduit</h1>
            <p>A place to share your knowledge.</p>
        </div>
    </div>
    <div class="container page">
        <div class="row">
            <div class="col-md-9">
                <div class="feed-toggle">
                    <ul class="nav nav-pills outline-active">
                        <li class="nav-item">
                            <a class="nav-link @feedState" href="/" @onclick(async () => await FeedAsync())>Your Feed</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @globalState" href="/" @onclick(async () => await GlobalAsync())>Global Feed</a>
                        </li>
                    </ul>
                </div>
                @foreach (var article in articleData.articles ?? new Article[0])
                {
                    var date = article.createdAt;

                    <div class="article-preview">
                        <div class="article-meta">
                            <a href="profile.html"><img src="@article.author.image" /></a>
                            <div class="info">
                                <a href="/profile/@article.author.username" class="author">@article.author.username</a>
                                <span class="date">@String.Format("{0:MMMM} {1}", date, Ordinal(date.Day))</span>
                            </div>
                            <button class="btn btn-outline-primary btn-sm pull-xs-right">
                                <i class="ion-heart"></i> @article.favoritesCount
                            </button>
                        </div>
                        <a href="/article/@article.slug" class="preview-link">
                            <h1>@article.title</h1>
                            <p>@article.description</p>
                            <span>Read more...</span>
                        </a>
                    </div>
                }

            </div>
            <div class="col-md-3">
                <div class="sidebar">
                    <p>Popular Tags</p>
                    <div class="tag-list">
                        @foreach (var tag in tagData.tags ?? new string[0])
                        {
                            <a href="" class="tag-pill tag-default" @onclick(async () => await SelectTag(tag))>@tag</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    ArticleData articleData = new ArticleData();
    TagData tagData = new TagData();
    string globalState;
    string feedState;

    protected override async Task OnInitAsync()
    {
        await GlobalAsync();
        tagData = await Http.GetJsonAsync<TagData>("https://conduit.productionready.io/api/tags");
    }

    async Task GlobalAsync()
    {
        globalState = "active";
        feedState = "disabled";
        articleData = await Http.GetJsonAsync<ArticleData>("https://conduit.productionready.io/api/articles?limit=10&offset=0");
        StateHasChanged();
    }

    async Task FeedAsync()
    {
        feedState = "active";
        globalState = "disabled";
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", AppState.User.token);
        articleData = await Http.GetJsonAsync<ArticleData>("https://conduit.productionready.io/api/articles/feed?limit=10&offset=0");
        StateHasChanged();
    }

    async Task SelectTag(string tag)
    {
        articleData = await Http.GetJsonAsync<ArticleData>($"https://conduit.productionready.io/api/articles?tag={tag}");
        StateHasChanged();
    }

    class ArticleData
    {
        public Article[] articles { get; set; }
    }

    class Article
    {
        public string title { get; set; }
        public string slug { get; set; }
        public DateTime createdAt { get; set; }
        public string description { get; set; }
        public Author author { get; set; }
        public int favoritesCount { get; set; }
    }

    class Author
    {
        public string username { get; set; }
        public string image { get; set; }
    }

    class TagData
    {
        public string[] tags { get; set; }
    }

    static string Ordinal(int number)
    {
        var work = number.ToString();
        if ((number % 100) == 11 || (number % 100) == 12 || (number % 100) == 13)
            return work + "th";
        switch (number % 10)
        {
            case 1: work += "st"; break;
            case 2: work += "nd"; break;
            case 3: work += "rd"; break;
            default: work += "th"; break;
        }
        return work;
    }
}
